# -*- coding: utf-8 -*-
"""Exercise 3.5 Create a classification model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wKy08JidnfM7z7ExHjlEbYVvW2kJ4atZ

## Exercise 3.5 Create a classification model

In this exercise, you will write code to create a neural network for classification task.

You can download the titanic dataset from the following link:

[titanic_all_numeric.csv](https://drive.google.com/file/d/11nuYS-l3EXCsGJt81y4YTt3oTnFGaB68/view?usp=drive_link)

The data is pre-loaded into a pandas DataFrame called `df`.

You'll take information about the passengers and predict which ones survived.

The target variable you'll be predicting is `survived`. You will have to convert it to a categorical variable named `target`. For convenience, everything in `df` except for the target has been converted to a NumPy array called `predictors`.

You'll create a neural network with a hidden layer and an output layer. The network can be created with the `Sequential` model constructor and the `Dense` layer constructor.

The neural network is used for a classification task, therefore, you will use `'sgd'` optimizer and `'categorical_crossentropy'` loss function when you compile the model.

After successfully compiling the model, you can fit your model using the `predictors` data and the `target` data.

## Instructions

* Convert `df.survived` to a categorical variable using the `to_categorical()` function.
* Specify a `Sequential` model called `model`.
* Add a `Dense` layer with `32` nodes. Use `'relu'` as the activation and `(n_cols,)` as the input_shape.
* Add the `Dense` output layer. Because there are two outcomes, it should have `2` units, and because it is a classification model, the activation should be `'softmax'`.
* Compile the model, using `'sgd'` as the optimizer, `'categorical_crossentropy'` as the loss function, and `metrics=['accuracy']` to see the accuracy (what fraction of predictions were correct) at the end of each epoch.
* Fit the model using the `predictors` and the `target`.

## Code

Load data and convert the data to NumPy array:
"""

import numpy as np
import pandas as pd

# Load csv file into the dataframe: df
df = pd.read_csv("titanic_all_numeric.csv")

# Convert the boolean values of the 'age_was_missing' column to integer
df.age_was_missing = df.age_was_missing.replace({True: 1, False: 0})

# Create predictors NumPy array: predictors
predictors = df.drop(['survived'], axis=1).values

"""Create the neural network, then compile and fit the model"""

# Import necessary modules
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical

# Save the number of columns in predictors: n_cols
n_cols = predictors.shape[1]

# Convert the target to categorical: target
target = to_categorical(df['survived'])

# Set up the model
model = Sequential()

# Add the first layer
model.add(Dense(32, activation='relu', input_shape=(n_cols,)))

# Add the output layer
model.add(Dense(2, activation='softmax'))

# Compile the model
model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])

# Fit the model
model.fit(predictors, target, epochs=10, batch_size=32)

"""The ouput should be:

28/28 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.6006 - loss: 3.6092   
<keras.src.callbacks.history.History at 0x7af1f8bd7f70>

"""